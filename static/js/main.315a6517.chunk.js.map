{"version":3,"sources":["reportWebVitals.ts","store/appReducer.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","api/api.ts","store/citiesCardsReducer.ts","components/ShortWeather/CitySearchForm/CitySearchForm.tsx","utils/dataDate.ts","components/ShortWeather/CityCard/CItyCardHeader/CityCardHeader.tsx","utils/roundingValue.ts","components/ShortWeather/CityCard/CityCardContent/CityCardContent.tsx","components/ShortWeather/CityCard/CityCard.tsx","components/ShortWeather/ShortWeather.tsx","components/DetailsWeather/ChartTemperature/ChartTemperature.tsx","components/DetailsWeather/HeaderDetailsWeather/HeaderDetailsWeather.tsx","components/DetailsWeather/DetailsInfoWeather/DetailsInfoWeather.tsx","components/DetailsWeather/DetailsWeather.tsx","App.tsx","store/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TOGGLE_IS_LOADING","SET_ERROR","initialState","isLoading","error","toggleIsLoading","type","setError","Alert","props","elevation","variant","ErrorSnackbar","useSelector","state","app","dispatch","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","API_KEY","instance","axios","create","baseURL","currentWeatherAPI","cityName","get","res","data","citiesId","lat","lon","getImgWeather","icon","ADD_CITY_CARD","DELETE_CITY_CARD","UPDATE_CITY_CARD","SET_DETAILS_CITY_CARD","citiesCards","detailsCityCard","addCityCard","cityCard","getCityCard","action","getState","a","result","isDuplicateCity","citiesCardsWeather","find","el","id","useStyles","makeStyles","createStyles","formSearch","padding","textAlign","inputFormSearch","margin","CitySearchForm","React","memo","classes","formik","useFormik","initialValues","onSubmit","values","resetForm","handleSubmit","className","Input","placeholder","getFieldProps","onChange","handleChange","value","Button","disabled","color","convertToHour","hourUnix","date","Date","hour","getHours","minutes","getMinutes","lineHeight","headerCard","maxHeight","CityCardHeader","cityId","currentDate","month","getMonth","dayOfWeek","getDay","getDate","getDateNow","CardHeader","Tooltip","title","IconButton","onClick","deleteCityCard","Delete","Typography","component","subheader","roundingValue","Math","round","cardContent","cursor","tempNow","fontSize","iconWeather","display","marginLeft","marginRight","CityCardContent","infoByTemp","wind","infoTemp","copyInfoTemp","objKey","roundingTemp","windSpeed","speed","history","useHistory","CardContent","push","temp","src","alt","feels_like","temp_max","temp_min","root","width","height","background","CityCard","Card","ShortWeather","Grid","container","spacing","cities","map","city","item","name","main","weather","ChartTemperature","dataWeatherHourly","detailCityCard","hourly","dt","i","style","chartType","loader","options","hAxis","vAxis","legend","backgroundColor","series","0","marginTop","HeaderDetailsWeather","currentTemp","descriptionWeather","DetailsInfoWeather","feelsLikeTemp","humidity","sunrise","sunset","detailsPageWeather","additionalInfo","DetailsWeather","params","useParams","useEffect","coord","Object","keys","length","LinearProgress","current","App","localDataCards","localStorage","getItem","JSON","parse","reverse","join","list","forEach","getSeveralCitiesCard","setItem","stringify","AppBar","position","Toolbar","Container","fixed","exact","path","rootReducer","combineReducers","filter","cardIndex","findIndex","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"6KAceA,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,8ECPRQ,EAAoB,oBACpBC,EAAY,YAEZC,EAAe,CACjBC,WAAW,EACXC,MAAO,MAmBEC,EAAkB,SAACF,GAAD,MAAyB,CAACG,KAAMN,EAAmBG,cACrEI,EAAW,SAACH,GAAD,MAA2B,CAACE,KAAML,EAAWG,UCpB/DI,EAAQ,SAACC,GACX,OAAO,cAAC,IAAD,aAAUC,UAAW,EAAGC,QAAQ,UAAaF,KAG3CG,EAAgB,WACzB,IAAMR,EAAQS,aAAyC,SAAAC,GAAK,OAAIA,EAAMC,IAAIX,SACpEY,EAAWC,cAEXC,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJJ,EAAST,EAAS,QAGtB,OACI,cAACc,EAAA,EAAD,CAAUC,OAAQlB,EAAOmB,iBAAkB,IAAMC,QAASN,EAA1D,SACI,cAAC,EAAD,CAAOM,QAASN,EAAaO,SAAS,QAAtC,SACKrB,O,yDCtBXsB,EAAU,mCAEVC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAQ,6CAGCC,EAAoB,SACXC,GACd,OAAOL,EAASM,IAAT,wBAAkDP,EAAlD,2BAA4EM,IAC9EtC,MAAK,SAAAwC,GAAG,OAAIA,EAAIC,SAHhBJ,EAAoB,SAKDK,GACxB,OAAOT,EAASM,IAAT,mBAAkDG,EAAlD,kBAAoEV,EAApE,kBACFhC,MAAK,SAAAwC,GAAG,OAAIA,EAAIC,SAPhBJ,EAAoB,SASVM,EAAaC,GAC5B,OAAOX,EAASM,IAAT,sBAAoDI,EAApD,gBAA+DC,EAA/D,gDAA0GZ,EAA1G,kBACFhC,MAAK,SAAAwC,GAAG,OAAIA,EAAIC,SAIhBI,EAAgB,SAACC,GAC1B,MAAM,qCAAN,OAA4CA,EAA5C,YCnBEC,EAAgB,gBAChBC,EAAmB,mBACnBC,EAAmB,mBACnBC,EAAwB,wBAExB1C,EAAe,CACjB2C,YAAa,GACbC,gBAAiB,IAsCRC,EAAc,SAACC,GAAD,MAAmC,CAAC1C,KAAMmC,EAAeO,aASvEC,EAAc,SAACjB,EAAkBkB,GAC1C,8CAAO,WAAOlC,EAAoBmC,GAA3B,iBAAAC,EAAA,sEAECpC,EAASX,GAAgB,IAF1B,SAGoB0B,EAAoCC,GAHxD,OAGKqB,EAHL,OAIgB,QAAXH,GACMI,EAAkBH,IAAWI,mBAAmBV,YAAYW,MAAK,SAAAC,GAAE,OAAIA,EAAGC,KAAOL,EAAOK,MAC5E1C,EAAlBsC,EAA2B/C,EAAS,0BAAsCwC,EAAYM,KACpE,WAAXH,GACPlC,EAjBiD,CAACV,KAAMqC,EAAkBK,SAiBlDK,IAE5BrC,EAASX,GAAgB,IAV1B,gDAYCW,EAAST,EAAS,+BAClBS,EAASX,GAAgB,IAb1B,yDAAP,yD,oCCrDEsD,EAAYC,aAAW,kBACzBC,YAAa,CACTC,WAAY,CACRC,QAAS,OACTC,UAAW,UAEfC,gBAAiB,CACbC,OAAQ,YAKPC,EAAiBC,IAAMC,MAAK,WACrC,IAAMC,EAAUX,IACVxD,EAAYU,aAAmC,SAAAC,GAAK,OAAIA,EAAMC,IAAIZ,aAClEa,EAAWC,cAEXsD,EAASC,YAAU,CACrBC,cAAe,CACXzC,SAAU,IAEd0C,SAAU,SAACC,GACP3D,EAASiC,EAAY0B,EAAO3C,SAAU,QACtCuC,EAAOK,eAIf,OACI,uBAAMF,SAAUH,EAAOM,aAAcC,UAAWR,EAAQR,WAAxD,UACI,cAACiB,EAAA,EAAD,yBAAOC,YAAY,QAAWT,EAAOU,cAAc,aAAnD,IACOC,SAAUX,EAAOY,aAAcC,MAAOb,EAAOI,OAAO3C,SACpD8C,UAAWR,EAAQL,mBAC1B,cAACoB,EAAA,EAAD,CAAQ/E,KAAK,SAASgF,SAAUnF,IAAcoE,EAAOI,OAAO3C,SACpDrB,QAAQ,YAAY4E,MAAM,UADlC,uB,6ECxCCC,GAAgB,SAACC,GAC1B,IAAIC,EAAO,IAAIC,KAAgB,IAAXF,GAChBG,EAAOF,EAAKG,WACZC,EAAUJ,EAAKK,aAEnB,OAAOH,EAAO,GACRE,EAAU,GAAV,WACQF,EADR,aACiBE,GADjB,WAEQF,EAFR,YAEgBE,GAHf,UAIEF,EAJF,QCQLjC,GAAYC,aAAW,kBACzBC,YAAa,CACT7B,SAAU,CACNgE,WAAY,KAEhBC,WAAY,CACRC,UAAW,aAKVC,GAAiB/B,IAAMC,MAAK,SAAC5D,GAA+B,IAChE2F,EAAoB3F,EAApB2F,OAAQpE,EAAYvB,EAAZuB,SACPqE,EDdgB,SAACX,GACvB,IAGIY,EAFS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAExEZ,EAAKa,YACpBC,EAJO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAIjCd,EAAKe,UAE1B,MAAM,GAAN,OAAUD,EAAV,YAAuBd,EAAKgB,UAA5B,YAAyCJ,GCOrBK,CAAW,IAAIhB,MAE7B3E,EAAWC,cACXqD,EAAUX,KAShB,OACI,cAACiD,GAAA,EAAD,CACI9B,UAAWR,EAAQ2B,WACnB/C,OACI,gCACI,cAAC2D,EAAA,EAAD,CAASC,MAAM,UAAf,SACI,cAACC,GAAA,EAAD,CAAYC,QAVP,WACrBhG,EAASiC,EAAYjB,EAAU,YASf,SACI,cAAC,KAAD,QAGR,cAAC6E,EAAA,EAAD,CAASC,MAAM,SAAf,SACI,cAACC,GAAA,EAAD,CAAYC,QAlBR,WACpBhG,EHyBsB,SAACoF,GAAD,MAAqB,CAAC9F,KAAMoC,EAAkB0D,UGzB3Da,CAAeb,KAiBR,SACI,cAACc,GAAA,EAAD,WAKhBJ,MACI,cAACK,EAAA,EAAD,CAAYxG,QAAQ,KAAKyG,UAAU,KAAKtC,UAAWR,EAAQtC,SAA3D,SACKA,IAGTqF,UAAWhB,O,UCjDViB,GAAgB,SAAClC,GAC1B,OAAOmC,KAAKC,MAAMpC,ICHhBzB,GAAYC,aAAW,kBACzBC,YAAa,CACT4D,YAAa,CACTC,OAAQ,WAEZC,QAAS,CACL3D,UAAW,SACX4D,SAAU,QAEdC,YAAa,CACTC,QAAS,QACTC,WAAY,OACZC,YAAa,aAKZC,GAAkB7D,IAAMC,MAAK,SAAC5D,GAAoC,IACtEuB,EAAoCvB,EAApCuB,SAAUkG,EAA0BzH,EAA1ByH,WAAYC,EAAc1H,EAAd0H,KAAM3F,EAAQ/B,EAAR+B,KAE7B4F,ED3BoB,SAACA,GACzB,IAAIC,EAAY,eAAOD,GACvB,IAAK,IAAIE,KAAUD,EAEfA,EAAaC,GAAUhB,GAAce,EAAaC,IAEtD,OAAOD,ECqBQE,CAAa,eAAIL,IAC5BM,EAAYlB,GAAca,EAAKM,OAE7BnE,EAAUX,KACV+E,EAAUC,cAMhB,OACI,eAACC,GAAA,EAAD,CAAa5B,QALS,WACtB0B,EAAQG,KAAR,mBAAyB7G,KAIgB8C,UAAWR,EAAQmD,YAA5D,UACI,eAACN,EAAA,EAAD,CAAYxG,QAAQ,KAAKyG,UAAU,IAAItC,UAAWR,EAAQqD,QAA1D,UACKS,EAASU,KADd,WAGA,qBAAKhE,UAAWR,EAAQuD,YAAakB,IAAKxG,EAAcC,GAAOwG,IAAI,iBACnE,eAAC7B,EAAA,EAAD,CAAYxG,QAAQ,QAAQ4E,MAAM,gBAAgB6B,UAAU,IAA5D,yBACiBgB,EAASa,WAD1B,aAGA,eAAC9B,EAAA,EAAD,CAAYxG,QAAQ,QAAQ4E,MAAM,gBAAgB6B,UAAU,IAA5D,mBACWgB,EAASc,SADpB,aAGA,eAAC/B,EAAA,EAAD,CAAYxG,QAAQ,QAAQ4E,MAAM,gBAAgB6B,UAAU,IAA5D,kBACUgB,EAASe,SADnB,aAGA,eAAChC,EAAA,EAAD,CAAYxG,QAAQ,QAAQ4E,MAAM,gBAAgB6B,UAAU,IAA5D,mBACWoB,EADX,gBC/CN7E,GAAYC,aAAW,kBACzBC,YAAa,CACTuF,KAAM,CACFC,MAAO,IACPC,OAAQ,IACRC,WAAY,iCAKXC,GAAWpF,IAAMC,MAAK,SAAC5D,GAChC,IAAM6D,EAAUX,KAEhB,OACI,eAAC8F,EAAA,EAAD,CAAM3E,UAAWR,EAAQ8E,KAAzB,UACI,cAACjD,GAAD,CAAgBC,OAAQ3F,EAAM2F,OAAQpE,SAAUvB,EAAMuB,WACtD,cAACiG,GAAD,eAAqBxH,UCjBpBiJ,GAAetF,IAAMC,MAAK,SAAC5D,GACpC,OACI,qCACI,cAAC0D,EAAD,IACA,cAACwF,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SAEQpJ,EAAMqJ,OAAOC,KAAI,SAAAC,GACb,OACI,cAACL,EAAA,EAAD,CAAMM,MAAI,EAAV,SACI,cAACT,GAAD,CAAUpD,OAAQ4D,EAAKtG,GAAI1B,SAAUgI,EAAKE,KAChChC,WAAY8B,EAAKG,KAAMhC,KAAM6B,EAAK7B,KAClC3F,KAAMwH,EAAKI,QAAQ,GAAG5H,QAHpBwH,EAAKtG,e,SCNpC2G,GAAmBjG,IAAMC,MAAK,SAAC5D,GAA0B,IAG1D6J,EAFmB7J,EAAlB8J,eAEkCC,OAAOT,KAAI,SAAAtG,GAI9C,MADwB,CAFb+B,GAAc/B,EAAGgH,IACjBnD,GAAc7D,EAAGqF,UAK5B3G,EAAmC,CAAC,CAAC,OAAQ,gBAEjD,GAAImI,EACA,IAAK,IAAII,EAAI,EAAGA,EAAI,GAAIA,IACpBvI,EAAK0G,KAAKyB,EAAkBI,IAIpC,OACI,cAACf,EAAA,EAAD,CAAMM,MAAI,EAACU,MAAO,CAAC3G,UAAW,UAA9B,SACI,cAAC,KAAD,CACIqF,MAAO,QACPC,OAAQ,QACRsB,UAAU,YACVC,OAAQ,gDACR1I,KAAMA,EACN2I,QAAS,CACLC,MAAO,CAACjE,MAAO,QACfkE,MAAO,CAAClE,MAAO,eACfmE,OAAQ,OACRC,gBAAiB,cACjBC,OAAQ,CACJC,EAAG,CAAC7F,MAAO,oBCnCjC5B,GAAYC,aAAW,kBACzBC,YAAa,CACT7B,SAAU,CACNqJ,UAAW,aAKVC,GAAuBlH,IAAMC,MAAK,SAAC5D,GACxC,IAAM6D,EAAUX,KACX3B,EAA6CvB,EAA7CuB,SAAUuJ,EAAmC9K,EAAnC8K,YAAaC,EAAsB/K,EAAtB+K,mBAE5B,OACI,gCACI,cAACrE,EAAA,EAAD,CAAYxG,QAAS,KAAMmE,UAAWR,EAAQtC,SAA9C,SACKA,IAEL,eAACmF,EAAA,EAAD,CAAYxG,QAAS,KAArB,UACK4K,EADL,WAGA,cAACpE,EAAA,EAAD,CAAYxG,QAAS,YAArB,SACK6K,UCtBRC,GAAqBrH,IAAMC,MAAK,SAAC5D,GAAuC,IACxEiL,EAA4CjL,EAA5CiL,cAAeC,EAA6BlL,EAA7BkL,SAAUC,EAAmBnL,EAAnBmL,QAASC,EAAUpL,EAAVoL,OAEvC,OACI,qCACI,eAAC1E,EAAA,EAAD,CAAYxG,QAAS,KAArB,yBACiB+K,EADjB,YAGA,eAACvE,EAAA,EAAD,CAAYxG,QAAS,KAArB,uBACegL,EADf,QAGA,eAACxE,EAAA,EAAD,CAAYxG,QAAS,KAArB,sBACciL,KAEd,eAACzE,EAAA,EAAD,CAAYxG,QAAS,KAArB,qBACakL,WCJvBlI,GAAYC,aAAW,kBACzBC,YAAa,CACTiI,mBAAoB,CAChB9H,UAAW,UAEf+H,eAAgB,CACZV,UAAW,aAKVW,GAAiB5H,IAAMC,MAAK,WACjC,IAAMC,EAAUX,KACV+E,EAAUC,cACV3H,EAAWC,cACXgL,EAA+BC,cAG/BlC,EADSnJ,aAAqD,SAAAC,GAAK,OAAIA,EAAMyC,mBAAmBV,eAClFW,MAAK,SAAAC,GAAE,OAAIA,EAAGyG,OAAS+B,EAAOjK,YAC5CuI,EAAiB1J,aAAkD,SAAAC,GAAK,OAAIA,EAAMyC,mBAAmBT,mBAQ3G,GANAqJ,qBAAU,WXuDgB,IAAC9J,EAAaC,EWtDhC0H,GACAhJ,GXqDmBqB,EWrDS2H,EAAKoC,MAAM/J,IXqDPC,EWrDY0H,EAAKoC,MAAM9J,IXqDrC,uCAA8B,WAAOtB,GAAP,eAAAoC,EAAA,sEAExDpC,EAASX,GAAgB,IAF+B,SAGrC0B,EAAqCM,EAAKC,GAHL,OAGpDe,EAHoD,OAIxDrC,EA1CwE,CAC5EV,KAAMsC,EACNE,gBAwCgCO,IAC5BrC,EAASX,GAAgB,IAL+B,gDAOxDW,EAAST,EAAS,WAClBS,EAASX,GAAgB,IAR+B,yDAA9B,0DWnDvB,CAAC2J,EAAMhJ,IAEiC,IAAvCqL,OAAOC,KAAK/B,GAAgBgC,OAAc,OAAO,cAACC,EAAA,EAAD,IAErD,IAIMjB,EAAcjE,GAAciD,EAAekC,QAAQ3D,MACnD0C,EAAqBjB,EAAekC,QAAQrC,QAAQ,GAAGD,KACvDuB,EAAgBpE,GAAciD,EAAekC,QAAQxD,YACrD0C,EAAWpB,EAAekC,QAAQd,SAClCC,EAAUpG,GAAc+E,EAAekC,QAAQb,SAC/CC,EAASrG,GAAc+E,EAAekC,QAAQZ,QAEpD,OACI,sBAAK/G,UAAWR,EAAQwH,mBAAxB,UACI,cAACR,GAAD,CAAsBtJ,SAAUiK,EAAOjK,SAAUuJ,YAAaA,EACxCC,mBAAoBA,IAC1C,eAAC7B,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACI,cAACF,EAAA,EAAD,CAAMM,MAAI,EAAV,SACI,cAACI,GAAD,CAAkBE,eAAgBA,MAEtC,cAACZ,EAAA,EAAD,CAAMM,MAAI,EAACnF,UAAWR,EAAQyH,eAA9B,SACI,cAACN,GAAD,CAAoBC,cAAeA,EAAeC,SAAUA,EACxCC,QAASA,EAASC,OAAQA,SAGtD,cAACxG,EAAA,EAAD,CAAQ2B,QAxBY,WACxB0B,EAAQG,KAAR,MAuB0ClI,QAAQ,YAAY4E,MAAM,YAAhE,6BCzDHmH,GAAM,WACf,IAAMvM,EAAYU,aAAmC,SAAAC,GAAK,OAAIA,EAAMC,IAAIZ,aAClEC,EAAQS,aAAyC,SAAAC,GAAK,OAAIA,EAAMC,IAAIX,SACpE0J,EAASjJ,aAAqD,SAAAC,GAAK,OAAIA,EAAMyC,mBAAmBV,eAChG7B,EAAWC,cAejB,OAbAkL,qBAAU,WACN,IAAMQ,EAAiBC,aAAaC,QAAQ,aAE5C,GAAIF,GAAqC,OAAnBA,EAAyB,CAC3C,IAAIvK,EAAW0K,KAAKC,MAAMJ,GAAgBK,UAAUC,OACpDjM,EZyDwB,SAACoB,GAAD,8CAAsB,WAAOpB,GAAP,SAAAoC,EAAA,sEAElDpC,EAASX,GAAgB,IAFyB,SAG/B0B,EAA8CK,GAHf,cAI3C8K,KAAKC,SAAQ,SAAA1J,GAAE,OAAIzC,EAAS+B,EAAYU,OAC/CzC,EAASX,GAAgB,IALyB,gDAOlDW,EAAST,EAAS,WAClBS,EAASX,GAAgB,IARyB,yDAAtB,sDYzDf+M,CAAqBhL,OAEnC,CAACpB,IAEJmL,qBAAU,WACNS,aAAaS,QAAQ,YAAaP,KAAKQ,UAAUxD,EAAOC,KAAI,SAACtG,GAAD,OAAQA,EAAGC,UACxE,CAACoG,IAGA,gCACK1J,GAAS,cAAC,EAAD,IACV,eAACmN,EAAA,EAAD,CAAQC,SAAS,SAAjB,UACI,cAACC,EAAA,EAAD,UACI,cAACtG,EAAA,EAAD,CAAYxG,QAAQ,KAApB,uBAIHR,GAAa,cAACqM,EAAA,EAAD,CAAgBjH,MAAM,iBAExC,cAACmI,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SAAsB,cAACnE,GAAD,CAAcI,OAAQA,MAC5C,cAAC,IAAD,CAAO+D,KAAK,qBAAZ,SAAiC,cAAC7B,GAAD,e,kBCvC/C8B,GAAcC,aAAgB,CAChCxK,mBbW8B,WAAwE,IAAvEzC,EAAsE,uDAA9DZ,EAAcgD,EAAgD,uCACrG,OAAQA,EAAO5C,MACX,KAAKmC,EACD,OAAO,2BACA3B,GADP,IAEI+B,YAAY,CAAEK,EAAOF,UAAV,mBAAuBlC,EAAM+B,gBAGhD,KAAKH,EACD,OAAO,2BACA5B,GADP,IAEI+B,YAAa/B,EAAM+B,YAAYmL,QAAO,SAAAvK,GAAE,OAAIA,EAAGC,KAAOR,EAAOkD,YAGrE,KAAKzD,EACD,IAAMsL,EAAYnN,EAAM+B,YAAYqL,WAAU,SAAAzK,GAAE,OAAIA,EAAGC,KAAOR,EAAOF,SAASU,MAE9E,OADA5C,EAAM+B,YAAYoL,GAAa/K,EAAOF,SAC/B,2BACAlC,GADP,IAEI+B,YAAY,YAAK/B,EAAM+B,eAG/B,KAAKD,EACD,OAAO,2BACA9B,GADP,IAEIgC,gBAAiBI,EAAOJ,kBAGhC,QACI,OAAOhC,IavCfC,IhBKsB,WAAgE,IAA/DD,EAA8D,uDAAtDZ,EAAcgD,EAAwC,uCACrF,OAAQA,EAAO5C,MACX,KAAKN,EACD,OAAO,2BAAIc,GAAX,IAAkBX,UAAW+C,EAAO/C,YAExC,KAAKF,EACD,OAAO,2BAAIa,GAAX,IAAkBV,MAAO8C,EAAO9C,QAEpC,QACI,OAAOU,MgBTNqN,GAAQC,aAAYN,GAAaO,aAAgBC,OAG9DC,OAAOJ,MAAQA,G,aCNfK,IAASC,OACL,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACI,cAAC,KAAD,UACI,cAAC,GAAD,QAGRO,SAASC,eAAe,SAM5BpP,M","file":"static/js/main.315a6517.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ActionsType} from '../types/types'\r\n\r\nconst TOGGLE_IS_LOADING = 'TOGGLE_IS_LOADING'\r\nconst SET_ERROR = 'SET_ERROR'\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    error: null as null | string\r\n}\r\nexport type AppReducerType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state = initialState, action: ActionsType): AppReducerType => {\r\n    switch (action.type) {\r\n        case TOGGLE_IS_LOADING: {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case SET_ERROR: {\r\n            return {...state, error: action.error}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleIsLoading = (isLoading: boolean) => ({type: TOGGLE_IS_LOADING, isLoading} as const)\r\nexport const setError = (error: null | string) => ({type: SET_ERROR, error} as const)","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppStateType} from '../../store/store'\r\nimport {setError} from '../../store/appReducer'\r\n\r\nconst Alert = (props: AlertProps) => {\r\n    return <MuiAlert elevation={6} variant='filled' {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n    const error = useSelector<AppStateType, null | string>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setError(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error'>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import axios from 'axios'\r\nimport {GetDetailsCityCardType, GetWeatherCityType, GetWeatherForCitiesType} from '../types/types'\r\n\r\nconst API_KEY = 'd047497993add0ea996af560b7e11c70'\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://api.openweathermap.org/data/2.5/`,\r\n})\r\n\r\nexport const currentWeatherAPI = {\r\n    getCurrentWeather(cityName: string) {\r\n        return instance.get<GetWeatherCityType>(`weather?appid=${API_KEY}&units=metric&q=${cityName}`)\r\n            .then(res => res.data)\r\n    },\r\n    getCurrentWeatherForSeveral(citiesId: string) {\r\n        return instance.get<GetWeatherForCitiesType>(`group?id=${citiesId}&appid=${API_KEY}&units=metric`)\r\n            .then(res => res.data)\r\n    },\r\n    getWeatherForHours(lat: number, lon: number) {\r\n        return instance.get<GetDetailsCityCardType>(`onecall?lat=${lat}&lon=${lon}&exclude=daily,alerts,minutely&appid=${API_KEY}&units=metric`)\r\n            .then(res => res.data)\r\n    },\r\n}\r\n\r\nexport const getImgWeather = (icon: string) => {\r\n    return `https://openweathermap.org/img/wn/${icon}@2x.png`\r\n}","import {currentWeatherAPI} from '../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport {setError, toggleIsLoading} from './appReducer'\r\nimport {AppStateType} from './store'\r\nimport {ActionsType, GetDetailsCityCardType, GetWeatherCityType} from '../types/types'\r\n\r\nconst ADD_CITY_CARD = 'ADD_CITY_CARD'\r\nconst DELETE_CITY_CARD = 'DELETE_CITY_CARD'\r\nconst UPDATE_CITY_CARD = 'UPDATE_CITY_CARD'\r\nconst SET_DETAILS_CITY_CARD = 'SET_DETAILS_CITY_CARD'\r\n\r\nconst initialState = {\r\n    citiesCards: [] as Array<GetWeatherCityType>,\r\n    detailsCityCard: {} as GetDetailsCityCardType\r\n}\r\nexport type CitiesCardsReducerType = typeof initialState\r\n\r\nexport const citiesCardsReducer = (state = initialState, action: ActionsType): CitiesCardsReducerType => {\r\n    switch (action.type) {\r\n        case ADD_CITY_CARD: {\r\n            return {\r\n                ...state,\r\n                citiesCards: [action.cityCard, ...state.citiesCards]\r\n            }\r\n        }\r\n        case DELETE_CITY_CARD: {\r\n            return {\r\n                ...state,\r\n                citiesCards: state.citiesCards.filter(el => el.id !== action.cityId)\r\n            }\r\n        }\r\n        case UPDATE_CITY_CARD: {\r\n            const cardIndex = state.citiesCards.findIndex(el => el.id === action.cityCard.id)\r\n            state.citiesCards[cardIndex] = action.cityCard\r\n            return {\r\n                ...state,\r\n                citiesCards: [...state.citiesCards]\r\n            }\r\n        }\r\n        case SET_DETAILS_CITY_CARD: {\r\n            return {\r\n                ...state,\r\n                detailsCityCard: action.detailsCityCard\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const addCityCard = (cityCard: GetWeatherCityType) => ({type: ADD_CITY_CARD, cityCard} as const)\r\nexport const updateCityCard = (cityCard: GetWeatherCityType) => ({type: UPDATE_CITY_CARD, cityCard} as const)\r\nexport const setDetailsCityCard = (detailsCityCard: GetDetailsCityCardType) => ({\r\n    type: SET_DETAILS_CITY_CARD,\r\n    detailsCityCard\r\n} as const)\r\nexport const deleteCityCard = (cityId: number) => ({type: DELETE_CITY_CARD, cityId} as const)\r\n\r\n\r\nexport const getCityCard = (cityName: string, action: 'ADD' | 'UPDATE') => {\r\n    return async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n        try {\r\n            dispatch(toggleIsLoading(true))\r\n            let result = await currentWeatherAPI.getCurrentWeather(cityName)\r\n            if (action === 'ADD') {\r\n                const isDuplicateCity = getState().citiesCardsWeather.citiesCards.find(el => el.id === result.id)\r\n                isDuplicateCity ? dispatch(setError('This city was selected')) : dispatch(addCityCard(result))\r\n            } else if (action === 'UPDATE') {\r\n                dispatch(updateCityCard(result))\r\n            }\r\n            dispatch(toggleIsLoading(false))\r\n        } catch (err) {\r\n            dispatch(setError('Error! This city not found'))\r\n            dispatch(toggleIsLoading(false))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getSeveralCitiesCard = (citiesId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(toggleIsLoading(true))\r\n        let result = await currentWeatherAPI.getCurrentWeatherForSeveral(citiesId)\r\n        result.list.forEach(el => dispatch(addCityCard(el)))\r\n        dispatch(toggleIsLoading(false))\r\n    } catch (err) {\r\n        dispatch(setError('Error!'))\r\n        dispatch(toggleIsLoading(false))\r\n    }\r\n}\r\n\r\nexport const getDetailsCityCard = (lat: number, lon: number) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(toggleIsLoading(true))\r\n        let result = await currentWeatherAPI.getWeatherForHours(lat, lon)\r\n        dispatch(setDetailsCityCard(result))\r\n        dispatch(toggleIsLoading(false))\r\n    } catch (err) {\r\n        dispatch(setError('Error!'))\r\n        dispatch(toggleIsLoading(false))\r\n    }\r\n}\r\n\r\n","import {useFormik} from 'formik'\r\nimport React from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {getCityCard} from '../../../store/citiesCardsReducer'\r\nimport {AppStateType} from '../../../store/store'\r\nimport {Button, Input} from '@material-ui/core'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        formSearch: {\r\n            padding: '30px',\r\n            textAlign: 'center',\r\n        },\r\n        inputFormSearch: {\r\n            margin: '5px'\r\n        }\r\n    })\r\n)\r\n\r\nexport const CitySearchForm = React.memo(() => {\r\n    const classes = useStyles()\r\n    const isLoading = useSelector<AppStateType, boolean>(state => state.app.isLoading)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            cityName: '',\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(getCityCard(values.cityName, 'ADD'))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} className={classes.formSearch}>\r\n            <Input placeholder='City' {...formik.getFieldProps('cityName')}\r\n                   onChange={formik.handleChange} value={formik.values.cityName}\r\n                   className={classes.inputFormSearch}/>\r\n            <Button type='submit' disabled={isLoading || !formik.values.cityName}\r\n                    variant='contained' color='primary'>Add</Button>\r\n        </form>\r\n    )\r\n})","export const convertToHour = (hourUnix: number): string => {\r\n    let date = new Date(hourUnix * 1000)\r\n    let hour = date.getHours()\r\n    let minutes = date.getMinutes()\r\n\r\n    return hour < 10\r\n        ? minutes < 10\r\n            ? `0${hour}:0${minutes}`\r\n            : `0${hour}:${minutes}`\r\n        : `${hour}:00`\r\n}\r\n\r\nexport const getDateNow = (date: Date) => {\r\n    let days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\n    let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\r\n    let month = months[date.getMonth()]\r\n    let dayOfWeek = days[date.getDay()]\r\n\r\n    return `${dayOfWeek} ${date.getDate()} ${month}`\r\n}","import React from 'react'\r\nimport {Tooltip} from '@material-ui/core'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport RefreshRoundedIcon from '@material-ui/icons/RefreshRounded'\r\nimport {Delete} from '@material-ui/icons'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\nimport {useDispatch} from 'react-redux'\r\nimport {deleteCityCard, getCityCard} from '../../../../store/citiesCardsReducer'\r\nimport {getDateNow} from '../../../../utils/dataDate'\r\nimport {CityCardHeaderType} from '../../../../types/types'\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        cityName: {\r\n            lineHeight: '1'\r\n        },\r\n        headerCard: {\r\n            maxHeight: '50px'\r\n        },\r\n    })\r\n)\r\n\r\nexport const CityCardHeader = React.memo((props: CityCardHeaderType) => {\r\n    let {cityId, cityName} = props\r\n    const currentDate = getDateNow(new Date())\r\n\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n\r\n    const deleteCardClick = () => {\r\n        dispatch(deleteCityCard(cityId))\r\n    }\r\n    const refreshCardClick = () => {\r\n        dispatch(getCityCard(cityName, 'UPDATE'))\r\n    }\r\n\r\n    return (\r\n        <CardHeader\r\n            className={classes.headerCard}\r\n            action={\r\n                <div>\r\n                    <Tooltip title='Refresh'>\r\n                        <IconButton onClick={refreshCardClick}>\r\n                            <RefreshRoundedIcon/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title='Delete'>\r\n                        <IconButton onClick={deleteCardClick}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </div>\r\n            }\r\n            title={\r\n                <Typography variant='h5' component='h1' className={classes.cityName}>\r\n                    {cityName}\r\n                </Typography>\r\n            }\r\n            subheader={currentDate}\r\n        />\r\n    )\r\n})","import {InfoByTempType} from '../types/types'\r\n\r\nexport const roundingTemp = (infoTemp: InfoByTempType): InfoByTempType => {\r\n    let copyInfoTemp = {...infoTemp}\r\n    for (let objKey in copyInfoTemp) {\r\n        // @ts-ignore\r\n        copyInfoTemp[objKey] = roundingValue(copyInfoTemp[objKey])\r\n    }\r\n    return copyInfoTemp\r\n}\r\n\r\nexport const roundingValue = (value: number): number => {\r\n    return Math.round(value)\r\n}","import React from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {roundingTemp, roundingValue} from '../../../../utils/roundingValue'\r\nimport {getImgWeather} from '../../../../api/api'\r\nimport {CommonCityCardPropsType} from '../../../../types/types'\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        cardContent: {\r\n            cursor: 'pointer'\r\n        },\r\n        tempNow: {\r\n            textAlign: 'center',\r\n            fontSize: '30px'\r\n        },\r\n        iconWeather: {\r\n            display: 'block',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto'\r\n        },\r\n    })\r\n)\r\n\r\nexport const CityCardContent = React.memo((props: CommonCityCardPropsType) => {\r\n    let {cityName, infoByTemp, wind, icon} = props\r\n\r\n    let infoTemp = roundingTemp({...infoByTemp})\r\n    let windSpeed = roundingValue(wind.speed)\r\n\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n\r\n    const redirectToDetails = () => {\r\n        history.push(`/details/${cityName}`)\r\n    }\r\n\r\n    return (\r\n        <CardContent onClick={redirectToDetails} className={classes.cardContent}>\r\n            <Typography variant='h5' component='p' className={classes.tempNow}>\r\n                {infoTemp.temp}°C\r\n            </Typography>\r\n            <img className={classes.iconWeather} src={getImgWeather(icon)} alt='weatherImage'/>\r\n            <Typography variant='body2' color='textSecondary' component='p'>\r\n                Feels like: {infoTemp.feels_like} ℃\r\n            </Typography>\r\n            <Typography variant='body2' color='textSecondary' component='p'>\r\n                High: {infoTemp.temp_max} ℃\r\n            </Typography>\r\n            <Typography variant='body2' color='textSecondary' component='p'>\r\n                Low: {infoTemp.temp_min} ℃\r\n            </Typography>\r\n            <Typography variant='body2' color='textSecondary' component='p'>\r\n                Wind: {windSpeed} m/s\r\n            </Typography>\r\n        </CardContent>\r\n    )\r\n})","import React from 'react'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport {CityCardHeader} from './CItyCardHeader/CityCardHeader'\r\nimport {CityCardContent} from './CityCardContent/CityCardContent'\r\nimport {CommonCityCardPropsType} from '../../../types/types'\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            width: 250,\r\n            height: 350,\r\n            background: 'rgba(242, 173, 104, 0.6)',\r\n        },\r\n    })\r\n)\r\n\r\nexport const CityCard = React.memo((props: CommonCityCardPropsType) => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CityCardHeader cityId={props.cityId} cityName={props.cityName}/>\r\n            <CityCardContent {...props}/>\r\n        </Card>\r\n    )\r\n})","import {CitySearchForm} from './CitySearchForm/CitySearchForm'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport React from 'react'\r\nimport {CityCard} from './CityCard/CityCard'\r\nimport {ShortWeatherType} from '../../types/types'\r\n\r\nexport const ShortWeather = React.memo((props: ShortWeatherType) => {\r\n    return (\r\n        <>\r\n            <CitySearchForm/>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    props.cities.map(city => {\r\n                        return (\r\n                            <Grid item key={city.id}>\r\n                                <CityCard cityId={city.id} cityName={city.name}\r\n                                          infoByTemp={city.main} wind={city.wind}\r\n                                          icon={city.weather[0].icon}/>\r\n                            </Grid>)\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n})","import React from 'react'\r\nimport {Chart} from 'react-google-charts'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {convertToHour} from '../../../utils/dataDate'\r\nimport {roundingValue} from '../../../utils/roundingValue'\r\nimport {ChartTempType} from '../../../types/types'\r\n\r\n\r\nexport const ChartTemperature = React.memo((props: ChartTempType) => {\r\n        let {detailCityCard} = props\r\n\r\n        let dataWeatherHourly = detailCityCard.hourly.map(el => {\r\n            let hour = convertToHour(el.dt)\r\n            let temp = roundingValue(el.temp)\r\n            let array: Array<any> = [hour, temp]\r\n            return array\r\n        })\r\n\r\n        let data: Array<number[] | string[]> = [['Hour', 'Temperature']]\r\n\r\n        if (dataWeatherHourly) {\r\n            for (let i = 0; i < 24; i++) {\r\n                data.push(dataWeatherHourly[i])\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Grid item style={{textAlign: 'center'}}>\r\n                <Chart\r\n                    width={'600px'}\r\n                    height={'400px'}\r\n                    chartType='LineChart'\r\n                    loader={<div>Loading Chart</div>}\r\n                    data={data}\r\n                    options={{\r\n                        hAxis: {title: 'Hour'},\r\n                        vAxis: {title: 'Temperature'},\r\n                        legend: 'none',\r\n                        backgroundColor: 'transparent',\r\n                        series: {\r\n                            0: {color: '#e2431e'},\r\n                        }\r\n                    }}\r\n                />\r\n            </Grid>\r\n        )\r\n    }\r\n)","import React from 'react'\r\nimport {Typography} from '@material-ui/core'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\nimport {HeaderDetailsWeatherPropsType} from '../../../types/types'\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        cityName: {\r\n            marginTop: '15px'\r\n        },\r\n    })\r\n)\r\n\r\nexport const HeaderDetailsWeather = React.memo((props: HeaderDetailsWeatherPropsType) => {\r\n        const classes = useStyles()\r\n        let {cityName, currentTemp, descriptionWeather} = props\r\n\r\n        return (\r\n            <div>\r\n                <Typography variant={'h3'} className={classes.cityName}>\r\n                    {cityName}\r\n                </Typography>\r\n                <Typography variant={'h4'}>\r\n                    {currentTemp}°C\r\n                </Typography>\r\n                <Typography variant={'subtitle2'}>\r\n                    {descriptionWeather}\r\n                </Typography>\r\n            </div>\r\n        )\r\n    }\r\n)","import React from 'react'\r\nimport {Typography} from '@material-ui/core'\r\nimport { DetailsInfoWeatherPropType } from '../../../types/types'\r\n\r\nexport const DetailsInfoWeather = React.memo((props: DetailsInfoWeatherPropType) => {\r\n        let {feelsLikeTemp, humidity, sunrise, sunset} = props\r\n\r\n        return (\r\n            <>\r\n                <Typography variant={'h6'}>\r\n                    Feels like: {feelsLikeTemp} °C\r\n                </Typography>\r\n                <Typography variant={'h6'}>\r\n                    Humidity: {humidity} %\r\n                </Typography>\r\n                <Typography variant={'h6'}>\r\n                    Sunrise: {sunrise}\r\n                </Typography>\r\n                <Typography variant={'h6'}>\r\n                    Sunset: {sunset}\r\n                </Typography>\r\n            </>\r\n        )\r\n    }\r\n)","import React, {useEffect} from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {Button, LinearProgress} from '@material-ui/core'\r\nimport {ChartTemperature} from './ChartTemperature/ChartTemperature'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppStateType} from '../../store/store'\r\nimport {getDetailsCityCard} from '../../store/citiesCardsReducer'\r\nimport {roundingValue} from '../../utils/roundingValue'\r\nimport {convertToHour} from '../../utils/dataDate'\r\nimport {useHistory, useParams} from 'react-router-dom'\r\nimport {GetDetailsCityCardType, GetWeatherCityType} from '../../types/types'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\nimport {HeaderDetailsWeather} from './HeaderDetailsWeather/HeaderDetailsWeather'\r\nimport {DetailsInfoWeather} from './DetailsInfoWeather/DetailsInfoWeather'\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        detailsPageWeather: {\r\n            textAlign: 'center'\r\n        },\r\n        additionalInfo: {\r\n            marginTop: '70px'\r\n        }\r\n    })\r\n)\r\n\r\nexport const DetailsWeather = React.memo(() => {\r\n        const classes = useStyles()\r\n        const history = useHistory()\r\n        const dispatch = useDispatch()\r\n        const params: { cityName: string } = useParams()\r\n\r\n        const cities = useSelector<AppStateType, Array<GetWeatherCityType>>(state => state.citiesCardsWeather.citiesCards)\r\n        const city = cities.find(el => el.name === params.cityName)\r\n        const detailCityCard = useSelector<AppStateType, GetDetailsCityCardType>(state => state.citiesCardsWeather.detailsCityCard)\r\n\r\n        useEffect(() => {\r\n            if (city) {\r\n                dispatch(getDetailsCityCard(city.coord.lat, city.coord.lon))\r\n            }\r\n        }, [city, dispatch])\r\n\r\n        if (Object.keys(detailCityCard).length === 0) return <LinearProgress/>\r\n\r\n        const redirectToCityCards = () => {\r\n            history.push(`/`)\r\n        }\r\n\r\n        const currentTemp = roundingValue(detailCityCard.current.temp)\r\n        const descriptionWeather = detailCityCard.current.weather[0].main\r\n        const feelsLikeTemp = roundingValue(detailCityCard.current.feels_like)\r\n        const humidity = detailCityCard.current.humidity\r\n        const sunrise = convertToHour(detailCityCard.current.sunrise)\r\n        const sunset = convertToHour(detailCityCard.current.sunset)\r\n\r\n        return (\r\n            <div className={classes.detailsPageWeather}>\r\n                <HeaderDetailsWeather cityName={params.cityName} currentTemp={currentTemp}\r\n                                      descriptionWeather={descriptionWeather}/>\r\n                <Grid container spacing={3}>\r\n                    <Grid item>\r\n                        <ChartTemperature detailCityCard={detailCityCard}/>\r\n                    </Grid>\r\n                    <Grid item className={classes.additionalInfo}>\r\n                        <DetailsInfoWeather feelsLikeTemp={feelsLikeTemp} humidity={humidity}\r\n                                            sunrise={sunrise} sunset={sunset}/>\r\n                    </Grid>\r\n                </Grid>\r\n                <Button onClick={redirectToCityCards} variant='contained' color='secondary'>\r\n                    Come back\r\n                </Button>\r\n            </div>\r\n        )\r\n    }\r\n)","import React, {useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppStateType} from './store/store'\nimport {AppBar, Container, LinearProgress, Toolbar, Typography} from '@material-ui/core'\nimport {ErrorSnackbar} from './components/ErrorSnackbar/ErrorSnackbar'\nimport {Route, Switch} from 'react-router-dom'\nimport {ShortWeather} from './components/ShortWeather/ShortWeather'\nimport {DetailsWeather} from './components/DetailsWeather/DetailsWeather'\nimport {getSeveralCitiesCard} from './store/citiesCardsReducer'\nimport {GetWeatherCityType} from './types/types'\n\nexport const App = () => {\n    const isLoading = useSelector<AppStateType, boolean>(state => state.app.isLoading)\n    const error = useSelector<AppStateType, null | string>(state => state.app.error)\n    const cities = useSelector<AppStateType, Array<GetWeatherCityType>>(state => state.citiesCardsWeather.citiesCards)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const localDataCards = localStorage.getItem('cityCards')\n\n        if (localDataCards && localDataCards !== '[]') {\n            let citiesId = JSON.parse(localDataCards).reverse().join()\n            dispatch(getSeveralCitiesCard(citiesId))\n        }\n    }, [dispatch])\n\n    useEffect(() => {\n        localStorage.setItem('cityCards', JSON.stringify(cities.map((el) => el.id)))\n    }, [cities])\n\n    return (\n        <div>\n            {error && <ErrorSnackbar/>}\n            <AppBar position='static'>\n                <Toolbar>\n                    <Typography variant='h6'>\n                        Weather\n                    </Typography>\n                </Toolbar>\n                {isLoading && <LinearProgress color='secondary'/>}\n            </AppBar>\n            <Container fixed>\n                <Switch>\n                    <Route exact path='/'><ShortWeather cities={cities}/></Route>\n                    <Route path='/details/:cityName'><DetailsWeather/></Route>\n                </Switch>\n            </Container>\n        </div>\n    )\n}","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {citiesCardsReducer} from './citiesCardsReducer'\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from './appReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    citiesCardsWeather: citiesCardsReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport {App} from './App'\nimport {Provider} from 'react-redux'\nimport {store} from './store/store'\nimport {HashRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}