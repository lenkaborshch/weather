{"version":3,"sources":["reportWebVitals.ts","api/api.ts","store/appReducer.ts","store/sitiesCardsReducer.ts","components/CityCard/CItyCardHeader/CityCardHeader.tsx","components/CityCard/CityCardContent/CityCardContent.tsx","components/CityCard/CityCard.tsx","components/CitySearchForm/CitySearchForm.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","App.tsx","store/store.ts","index.tsx","components/CitySearchForm/CitySearchForm.module.css"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","API_KEY","instance","axios","create","baseURL","currentWeatherAPI","cityName","get","res","data","citiesId","TOGGLE_IS_LOADING","SET_ERROR","initialState","isLoading","error","toggleIsLoading","type","setError","ADD_CITY_CARD","DELETE_CITY_CARD","UPDATE_CITY_CARD","addCityCard","cityCard","getCityCard","action","dispatch","getState","a","result","isDuplicateCity","citiesCards","find","el","id","date","month","getMonth","dayOfWeek","getDay","getDate","getDateNow","Date","useStyles","makeStyles","createStyles","refreshBtn","paddingRight","deleteBtn","paddingLeft","lineHeight","headerCard","maxHeight","CityCardHeader","React","memo","props","cityId","useDispatch","classes","CardHeader","className","Tooltip","title","IconButton","onClick","deleteCityCard","Delete","Typography","variant","component","subheader","tempNow","textAlign","fontSize","iconWeather","display","marginLeft","marginRight","CityCardContent","infoTemp","wind","icon","objKey","Math","round","roundingTemp","CardContent","temp","src","alt","color","feels_like","temp_max","temp_min","speed","root","width","height","background","CityCard","Card","CitySearchForm","useSelector","state","app","formik","useFormik","initialValues","onSubmit","values","resetForm","handleSubmit","style","formSearch","Input","placeholder","getFieldProps","onChange","handleChange","value","inputFormSearch","Button","disabled","Alert","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","cities","map","city","Grid","item","name","main","weather","useEffect","localDataCards","localStorage","getItem","JSON","parse","reverse","join","list","forEach","getSeveralCitiesCard","setItem","stringify","AppBar","position","Toolbar","LinearProgress","Container","fixed","container","spacing","rootReducer","combineReducers","filter","cardIndex","findIndex","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a90eeef5.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios'\r\n\r\nconst API_KEY = 'd047497993add0ea996af560b7e11c70'\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://api.openweathermap.org/`,\r\n})\r\n\r\nexport const currentWeatherAPI = {\r\n    getCurrentWeather(cityName: string) {\r\n        return instance.get<GetWeatherAPIType>(`data/2.5/weather?appid=${API_KEY}&units=metric&q=${cityName}`)\r\n            .then(res => res.data)\r\n    },\r\n    getCurrentWeatherForSeveral(citiesId: string) {\r\n        return instance.get<GetWeatherAPIForSeveralType>(`data/2.5/group?id=${citiesId}&appid=${API_KEY}&units=metric`)\r\n            .then(res => res.data)\r\n    },\r\n}\r\n\r\nexport type GetWeatherAPIType = {\r\n    coord: {\r\n        lon: number\r\n        lat: number\r\n    },\r\n    weather: [\r\n        {\r\n            id: number\r\n            main: string\r\n            description: string\r\n            icon: string\r\n        }\r\n    ],\r\n    base: string\r\n    main: {\r\n        temp: number\r\n        feels_like: number\r\n        temp_min: number\r\n        temp_max: number\r\n        pressure: number\r\n        humidity: number\r\n    },\r\n    visibility: number\r\n    wind: {\r\n        'speed': number\r\n        'deg': number\r\n    },\r\n    clouds: {\r\n        all: number\r\n    },\r\n    dt: number\r\n    sys: {\r\n        type: number\r\n        id: number\r\n        country: string\r\n        sunrise: number\r\n        sunset: number\r\n    },\r\n    timezone: number\r\n    id: number\r\n    name: string\r\n    cod: number\r\n}\r\nexport type GetWeatherAPIForSeveralType = {\r\n    cnt: number\r\n    list: Array<GetWeatherAPIType>\r\n}","const TOGGLE_IS_LOADING = 'TOGGLE_IS_LOADING'\r\nconst SET_ERROR = 'SET_ERROR'\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    error: null as null | string\r\n}\r\nexport type AppReducerType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state = initialState, action: ActionsType): AppReducerType => {\r\n    switch (action.type) {\r\n        case TOGGLE_IS_LOADING: {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        case SET_ERROR: {\r\n            return {...state, error: action.error}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleIsLoading = (isLoading: boolean) => ({type: TOGGLE_IS_LOADING, isLoading} as const)\r\nexport const setError = (error: null | string) => ({type: SET_ERROR, error} as const)\r\n\r\n\r\ntype ActionsType = ReturnType<typeof toggleIsLoading> | ReturnType<typeof setError>","import {currentWeatherAPI, GetWeatherAPIType} from '../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport {setError, toggleIsLoading} from './appReducer'\r\nimport {AppStateType} from './store'\r\n\r\nconst ADD_CITY_CARD = 'ADD_CITY_CARD'\r\nconst DELETE_CITY_CARD = 'DELETE_CITY_CARD'\r\nconst UPDATE_CITY_CARD = 'UPDATE_CITY_CARD'\r\n\r\nconst initialState: SitiesCardsType = []\r\nexport type SitiesCardsType = Array<GetWeatherAPIType>\r\n\r\n\r\nexport const sitiesCardsReducer = (state = initialState, action: ActionsType): SitiesCardsType => {\r\n    switch (action.type) {\r\n        case ADD_CITY_CARD: {\r\n            return [action.cityCard, ...state]\r\n        }\r\n        case DELETE_CITY_CARD: {\r\n            return state.filter(el => el.id !== action.cityId)\r\n        }\r\n        case UPDATE_CITY_CARD: {\r\n            const cardIndex = state.findIndex(el => el.id === action.cityCard.id)\r\n            state[cardIndex] = action.cityCard\r\n            return [...state]\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nconst addCityCard = (cityCard: GetWeatherAPIType) => ({type: ADD_CITY_CARD, cityCard} as const)\r\nconst updateCityCard = (cityCard: GetWeatherAPIType) => ({type: UPDATE_CITY_CARD, cityCard} as const)\r\nexport const deleteCityCard = (cityId: number) => ({type: DELETE_CITY_CARD, cityId} as const)\r\n\r\n\r\nexport const getCityCard = (cityName: string, action: 'ADD' | 'UPDATE') => {\r\n    return async (dispatch: Dispatch, getState: () => AppStateType) => {\r\n        try {\r\n            dispatch(toggleIsLoading(true))\r\n            let result = await currentWeatherAPI.getCurrentWeather(cityName)\r\n            if (action === 'ADD') {\r\n                const isDuplicateCity = getState().citiesCards.find(el => el.id === result.id)\r\n                isDuplicateCity ? dispatch(setError('This city was selected')) : dispatch(addCityCard(result))\r\n            } else if (action === 'UPDATE') {\r\n                dispatch(updateCityCard(result))\r\n            }\r\n            dispatch(toggleIsLoading(false))\r\n        } catch (err) {\r\n            dispatch(setError('Error! This city not found'))\r\n            dispatch(toggleIsLoading(false))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getSeveralCitiesCard = (citiesId: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(toggleIsLoading(true))\r\n        let result = await currentWeatherAPI.getCurrentWeatherForSeveral(citiesId)\r\n        result.list.forEach(el => dispatch(addCityCard(el)))\r\n        dispatch(toggleIsLoading(false))\r\n    } catch (err) {\r\n        dispatch(setError('Error!'))\r\n        dispatch(toggleIsLoading(false))\r\n    }\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof addCityCard>\r\n    | ReturnType<typeof deleteCityCard>\r\n    | ReturnType<typeof updateCityCard>","import React from 'react'\r\nimport {Tooltip} from '@material-ui/core'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport RefreshRoundedIcon from '@material-ui/icons/RefreshRounded'\r\nimport {Delete} from '@material-ui/icons'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\nimport {useDispatch} from 'react-redux'\r\nimport {deleteCityCard, getCityCard} from '../../../store/sitiesCardsReducer'\r\n\r\nconst getDateNow = (date: Date) => {\r\n    let days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\n    let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\r\n    let month = months[date.getMonth()]\r\n    let dayOfWeek = days[date.getDay()]\r\n\r\n    return `${dayOfWeek} ${date.getDate()} ${month}`\r\n}\r\nconst date = getDateNow(new Date())\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        refreshBtn: {\r\n            paddingRight: '5px'\r\n        },\r\n        deleteBtn: {\r\n            paddingLeft: '5px'\r\n        },\r\n        cityName: {\r\n            lineHeight: '1'\r\n        },\r\n        headerCard: {\r\n            maxHeight: '50px'\r\n        },\r\n    })\r\n)\r\n\r\ntype CityCardHeaderType = {\r\n    cityId: number\r\n    cityName: string\r\n}\r\n\r\nexport const CityCardHeader = React.memo((props: CityCardHeaderType) => {\r\n    let {cityId, cityName} = props\r\n\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n\r\n    const deleteCardClick = () => {\r\n        dispatch(deleteCityCard(cityId))\r\n    }\r\n    const refreshCardClick = () => {\r\n        dispatch(getCityCard(cityName, 'UPDATE'))\r\n    }\r\n\r\n    return (\r\n        <CardHeader\r\n            className={classes.headerCard}\r\n            action={\r\n                <div>\r\n                    <Tooltip title='Refresh'>\r\n                        <IconButton className={classes.refreshBtn} onClick={refreshCardClick}>\r\n                            <RefreshRoundedIcon/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title='Delete'>\r\n                        <IconButton className={classes.deleteBtn} onClick={deleteCardClick}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </div>\r\n            }\r\n            title={\r\n                <Typography variant='h5' component='h1' className={classes.cityName}>\r\n                    {cityName}\r\n                </Typography>\r\n            }\r\n            subheader={date}\r\n        />\r\n    )\r\n})","import React from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\nimport CardContent from '@material-ui/core/CardContent'\r\n\r\ntype InfoTempType = {\r\n    'temp': number\r\n    'feels_like': number\r\n    'temp_min': number\r\n    'temp_max': number\r\n    'pressure': number\r\n    'humidity': number\r\n}\r\n\r\ntype CityCardContentType = {\r\n    infoTemp: InfoTempType\r\n    wind: {\r\n        'speed': number\r\n        'deg': number\r\n    }\r\n    icon: string\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        tempNow: {\r\n            textAlign: 'center',\r\n            fontSize: '30px'\r\n        },\r\n        iconWeather: {\r\n            display: 'block',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto'\r\n        },\r\n    })\r\n)\r\n\r\nconst roundingTemp = (infoTemp: InfoTempType): InfoTempType => {\r\n    for (let objKey in infoTemp) {\r\n        // @ts-ignore\r\n        infoTemp[objKey] = Math.round(infoTemp[objKey])\r\n    }\r\n    return infoTemp\r\n}\r\n\r\n\r\nexport const CityCardContent = React.memo((props: CityCardContentType) => {\r\n    let {infoTemp, wind, icon} = props\r\n    infoTemp = roundingTemp(infoTemp)\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <CardContent>\r\n            <Typography variant='h5' component='p' className={classes.tempNow}>\r\n                {infoTemp.temp}°C\r\n            </Typography>\r\n            <img className={classes.iconWeather} src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\r\n                 alt='weatherImage'/>\r\n            <Typography variant='body2' color='textSecondary' component='p'>\r\n                Feels like: {infoTemp.feels_like} ℃\r\n            </Typography>\r\n            <Typography variant='body2' color='textSecondary' component='p'>\r\n                High: {infoTemp.temp_max} ℃\r\n            </Typography>\r\n            <Typography variant='body2' color='textSecondary' component='p'>\r\n                Low: {infoTemp.temp_min} ℃\r\n            </Typography>\r\n            <Typography variant='body2' color='textSecondary' component='p'>\r\n                Wind: {wind.speed} m/s\r\n            </Typography>\r\n        </CardContent>\r\n    )\r\n})","import React from 'react'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport {CityCardHeader} from './CItyCardHeader/CityCardHeader'\r\nimport {CityCardContent} from './CityCardContent/CityCardContent'\r\n\r\ntype InfoTempType = {\r\n    'temp': number\r\n    'feels_like': number\r\n    'temp_min': number\r\n    'temp_max': number\r\n    'pressure': number\r\n    'humidity': number\r\n}\r\n\r\ntype CardPropsType = {\r\n    cityId: number\r\n    cityName: string\r\n    infoTemp: InfoTempType\r\n    wind: {\r\n        'speed': number\r\n        'deg': number\r\n    }\r\n    icon: string\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            width: 250,\r\n            height: 350,\r\n            background: 'rgba(242, 173, 104, 0.6)',\r\n        },\r\n    })\r\n)\r\n\r\nexport const CityCard = React.memo((props: CardPropsType) => {\r\n    let {cityId, cityName, infoTemp, wind, icon} = props\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CityCardHeader cityId={cityId} cityName={cityName}/>\r\n            <CityCardContent infoTemp={infoTemp} wind={wind} icon={icon}/>\r\n        </Card>\r\n    )\r\n})","import {useFormik} from 'formik'\r\nimport React from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {getCityCard} from '../../store/sitiesCardsReducer'\r\nimport {AppStateType} from '../../store/store'\r\nimport style from './CitySearchForm.module.css'\r\nimport {Button, Input} from '@material-ui/core'\r\n\r\nexport const CitySearchForm = React.memo(() => {\r\n    const isLoading = useSelector<AppStateType, boolean>(state => state.app.isLoading)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            cityName: '',\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(getCityCard(values.cityName, 'ADD'))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} className={style.formSearch}>\r\n            <Input placeholder='City' {...formik.getFieldProps('cityName')}\r\n                   onChange={formik.handleChange} value={formik.values.cityName}\r\n                   className={style.inputFormSearch}/>\r\n            <Button type='submit' disabled={isLoading || !formik.values.cityName}\r\n                    variant='contained' color='primary'>Add</Button>\r\n        </form>\r\n    )\r\n})","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppStateType} from '../../store/store'\r\nimport {setError} from '../../store/appReducer'\r\n\r\nconst Alert = (props: AlertProps) => {\r\n    return <MuiAlert elevation={6} variant='filled' {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n    const error = useSelector<AppStateType, null | string>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setError(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity='error'>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\nimport './App.css'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppStateType} from './store/store'\nimport {getSeveralCitiesCard, SitiesCardsType} from './store/sitiesCardsReducer'\nimport {CityCard} from './components/CityCard/CityCard'\nimport Grid from '@material-ui/core/Grid'\nimport {AppBar, Container, LinearProgress, Toolbar, Typography} from '@material-ui/core'\nimport {CitySearchForm} from './components/CitySearchForm/CitySearchForm'\nimport {ErrorSnackbar} from './components/ErrorSnackbar/ErrorSnackbar'\n\nexport const App = () => {\n    const cities = useSelector<AppStateType, SitiesCardsType>(state => state.citiesCards)\n    const isLoading = useSelector<AppStateType, boolean>(state => state.app.isLoading)\n    const error = useSelector<AppStateType, null | string>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const citiesCards = cities.map(city => {\n        return (\n            <Grid item key={city.id}>\n                <CityCard cityId={city.id} cityName={city.name}\n                          infoTemp={city.main} wind={city.wind}\n                          icon={city.weather[0].icon}/>\n            </Grid>)\n    })\n\n    useEffect(() => {\n        const localDataCards = localStorage.getItem('cityCards')\n\n        if (localDataCards && localDataCards !== '[]') {\n            let citiesId = JSON.parse(localDataCards).reverse().join()\n            dispatch(getSeveralCitiesCard(citiesId))\n        }\n    }, [dispatch])\n\n    useEffect(() => {\n        localStorage.setItem('cityCards', JSON.stringify(cities.map((el) => el.id)))\n    }, [cities])\n\n    return (\n        <div className='App'>\n            {error && <ErrorSnackbar/>}\n            <AppBar position='static'>\n                <Toolbar>\n                    <Typography variant='h6'>\n                        Weather\n                    </Typography>\n                </Toolbar>\n                {isLoading && <LinearProgress color='secondary'/>}\n            </AppBar>\n            <Container fixed>\n                <CitySearchForm/>\n                <Grid container spacing={3}>\n                    {citiesCards}\n                </Grid>\n            </Container>\n        </div>\n    )\n}","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {sitiesCardsReducer} from './sitiesCardsReducer'\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from './appReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    citiesCards: sitiesCardsReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport {App} from './App'\nimport {Provider} from 'react-redux'\nimport {store} from './store/store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formSearch\":\"CitySearchForm_formSearch__2isJ9\",\"inputFormSearch\":\"CitySearchForm_inputFormSearch__YBbzO\"};"],"sourceRoot":""}