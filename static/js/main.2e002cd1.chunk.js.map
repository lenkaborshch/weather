{"version":3,"sources":["reportWebVitals.ts","api/api.ts","store/appReducer.ts","store/sitiesCardsReducer.ts","components/Card/Card.tsx","components/CitySearchForm/CitySearchForm.tsx","App.tsx","store/store.ts","index.tsx","components/CitySearchForm/CitySearchForm.module.css"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","currentWeatherAPI","cityName","get","res","data","TOGGLE_IS_LOADING","initialState","isLoading","toggleIsLoading","type","ADD_CITY_CARD","DELETE_CITY_CARD","addCity","dispatch","cod","cityCard","finally","date","month","getMonth","dayOfWeek","getDay","getDate","getDateNow","Date","useStyles","makeStyles","createStyles","root","minWidth","background","media","height","paddingTop","width","tempNow","textAlign","CityCard","props","cityId","generalInfoTemp","wind","icon","useDispatch","classes","Card","className","CardHeader","action","Tooltip","title","IconButton","aria-label","onClick","deleteCityCard","Delete","subheader","CardContent","Typography","variant","component","temp","style","display","marginLeft","marginRight","src","alt","color","feels_like","temp_max","temp_min","speed","CitySearchForm","React","memo","useSelector","state","app","formik","useFormik","initialValues","onSubmit","values","resetForm","handleSubmit","formSearch","Input","placeholder","getFieldProps","onChange","handleChange","value","inputFormSearch","Button","disabled","App","cities","sitiesCards","AppBar","position","Toolbar","LinearProgress","Container","fixed","Grid","container","spacing","map","city","item","id","name","main","weather","rootReducer","combineReducers","filter","card","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2e002cd1.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios'\r\n\r\nconst API_KEY = 'd047497993add0ea996af560b7e11c70'\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://api.openweathermap.org/`,\r\n})\r\n\r\nexport const currentWeatherAPI = {\r\n    getWeatherForCity(cityName: string) {\r\n        return instance.get<GetWeatherAPIType>(`data/2.5/weather?appid=${API_KEY}&units=metric&q=${cityName}`)\r\n            .then(res => res.data)\r\n    },\r\n}\r\n\r\nexport type GetWeatherAPIType = {\r\n    coord: {\r\n        lon: number\r\n        lat: number\r\n    },\r\n    weather: [\r\n        {\r\n            id: number\r\n            main: string\r\n            description: string\r\n            icon: string\r\n        }\r\n    ],\r\n    base: string\r\n    main: {\r\n        temp: number\r\n        feels_like: number\r\n        temp_min: number\r\n        temp_max: number\r\n        pressure: number\r\n        humidity: number\r\n    },\r\n    visibility: number\r\n    wind: {\r\n        'speed': number\r\n        'deg': number\r\n    },\r\n    clouds: {\r\n        all: number\r\n    },\r\n    dt: number\r\n    sys: {\r\n        type: number\r\n        id: number\r\n        country: string\r\n        sunrise: number\r\n        sunset: number\r\n    },\r\n    timezone: number\r\n    id: number\r\n    name: string\r\n    cod: number\r\n}","\r\nconst TOGGLE_IS_LOADING = 'TOGGLE_IS_LOADING'\r\n\r\nconst initialState = {\r\n    isLoading: false\r\n}\r\nexport type AppReducerType = typeof initialState\r\n\r\n\r\nexport const appReducer = (state = initialState, action: ActionsType): AppReducerType => {\r\n    switch (action.type) {\r\n        case TOGGLE_IS_LOADING: {\r\n            return {...state, isLoading: action.isLoading}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nexport const toggleIsLoading = (isLoading: boolean) => ({type: TOGGLE_IS_LOADING, isLoading} as const)\r\n\r\n\r\ntype ActionsType = ReturnType<typeof toggleIsLoading>","import {currentWeatherAPI, GetWeatherAPIType} from '../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport {toggleIsLoading} from './appReducer'\r\n\r\nconst ADD_CITY_CARD = 'ADD_CITY_CARD'\r\nconst DELETE_CITY_CARD = 'DELETE_CITY_CARD'\r\n\r\nconst initialState: SitiesCardsType = []\r\nexport type SitiesCardsType = Array<GetWeatherAPIType>\r\n\r\n\r\nexport const sitiesCardsReducer = (state = initialState, action: ActionsType): SitiesCardsType => {\r\n    switch (action.type) {\r\n        case ADD_CITY_CARD: {\r\n            return [action.cityCard, ...state]\r\n        }\r\n        case DELETE_CITY_CARD: {\r\n            return state.filter(card => card.id !== action.cityId)\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}\r\n\r\nconst addCityCard = (cityCard: any) => ({type: ADD_CITY_CARD, cityCard} as const)\r\nexport const deleteCityCard = (cityId: number) => ({type: DELETE_CITY_CARD, cityId} as const)\r\n\r\nexport const addCity = (cityName: string) => (dispatch: Dispatch) => {\r\n    dispatch(toggleIsLoading(true))\r\n    return currentWeatherAPI.getWeatherForCity(cityName)\r\n        .then(res => {\r\n            if (res.cod === 200) {\r\n                dispatch(addCityCard(res))\r\n            }\r\n        })\r\n        .finally(() => {\r\n                dispatch(toggleIsLoading(false))\r\n            }\r\n        )\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof addCityCard> | ReturnType<typeof deleteCityCard>\r\n","import React from 'react'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport {Tooltip} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {deleteCityCard} from '../../store/sitiesCardsReducer'\r\nimport {useDispatch} from 'react-redux'\r\n\r\ntype CardPropsType = {\r\n    cityId: number\r\n    cityName: string\r\n    generalInfoTemp: {\r\n        'temp': number\r\n        'feels_like': number\r\n        'temp_min': number\r\n        'temp_max': number\r\n        'pressure': number\r\n        'humidity': number\r\n    },\r\n    wind: {\r\n        'speed': number\r\n        'deg': number\r\n    },\r\n    icon: string\r\n}\r\n\r\nfunction getDateNow(date: Date) {\r\n    let days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\n    let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\r\n    let month = months[date.getMonth()]\r\n    let dayOfWeek = days[date.getDay()]\r\n\r\n    return `${dayOfWeek} ${date.getDate()} ${month}`\r\n}\r\n\r\nconst date = getDateNow(new Date())\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            minWidth: 200,\r\n            background: 'rgba(91, 180, 255, 0.3)',\r\n        },\r\n        media: {\r\n            height: 0,\r\n            paddingTop: '56.25%', // 16:9\r\n            width: '30%'\r\n        },\r\n        tempNow: {\r\n            textAlign: 'center'\r\n        }\r\n    }),\r\n)\r\n\r\nexport function CityCard(props: CardPropsType) {\r\n    let {cityId, cityName, generalInfoTemp, wind, icon} = props\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n\r\n    const deleteCardClick = () => {\r\n        dispatch(deleteCityCard(cityId))\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                action={\r\n                    <Tooltip title=\"Delete\">\r\n                        <IconButton aria-label=\"delete\" onClick={deleteCardClick}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                title={cityName}\r\n                subheader={date}\r\n            />\r\n            <CardContent>\r\n                <Typography variant='h5' component='h1' className={classes.tempNow}>\r\n                    {generalInfoTemp.temp} ℃\r\n                </Typography>\r\n                <img style={{\r\n                    display: 'block',\r\n                    marginLeft: 'auto',\r\n                    marginRight: 'auto'\r\n                }} src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt='weatherImage'/>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    Feels like: {generalInfoTemp.feels_like} ℃\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    High: {generalInfoTemp.temp_max} ℃\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    Low: {generalInfoTemp.temp_min} ℃\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    Wind: {wind.speed} m/s\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}","import {useFormik} from 'formik'\r\nimport React from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {addCity} from '../../store/sitiesCardsReducer'\r\nimport {AppStateType} from '../../store/store'\r\nimport style from './CitySearchForm.module.css'\r\nimport {Button, Input} from '@material-ui/core'\r\n\r\nexport const CitySearchForm = React.memo(() => {\r\n    const isLoading = useSelector<AppStateType, boolean>(state => state.app.isLoading)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            cityName: '',\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(addCity(values.cityName))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n    return (\r\n        <form onSubmit={formik.handleSubmit} className={style.formSearch}>\r\n            <Input placeholder='City' {...formik.getFieldProps('cityName')}\r\n                   onChange={formik.handleChange} value={formik.values.cityName}\r\n            className={style.inputFormSearch}/>\r\n            <Button type='submit' disabled={isLoading || !formik.values.cityName}\r\n                    variant='contained' color='primary'>Add</Button>\r\n        </form>\r\n    )\r\n})","import React from 'react'\nimport './App.css'\nimport {useSelector} from 'react-redux'\nimport {AppStateType} from './store/store'\nimport {SitiesCardsType} from './store/sitiesCardsReducer'\nimport {CityCard} from './components/Card/Card'\nimport Grid from '@material-ui/core/Grid'\nimport {AppBar, Container, LinearProgress, Toolbar, Typography} from '@material-ui/core'\nimport {CitySearchForm} from './components/CitySearchForm/CitySearchForm'\n\nexport const App = () => {\n    const cities = useSelector<AppStateType, SitiesCardsType>(state => state.sitiesCards)\n    const isLoading = useSelector<AppStateType, boolean>(state => state.app.isLoading)\n\n    return (\n        <div className='App'>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography variant=\"h6\">\n                        Weather\n                    </Typography>\n                </Toolbar>\n                {isLoading && <LinearProgress color=\"secondary\"/>}\n            </AppBar>\n            <Container fixed>\n                <CitySearchForm/>\n                <Grid container spacing={3}>\n                    {cities.map((city) => {\n                        return (\n                            <Grid item key={city.id}>\n                                <CityCard cityId={city.id} cityName={city.name}\n                                          generalInfoTemp={city.main} wind={city.wind}\n                                          icon={city.weather[0].icon}/>\n                            </Grid>)\n                    })}\n                </Grid>\n            </Container>\n        </div>\n    )\n}","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {sitiesCardsReducer} from './sitiesCardsReducer'\r\nimport thunk from 'redux-thunk'\r\nimport { appReducer } from './appReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    sitiesCards: sitiesCardsReducer,\r\n    app: appReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport {App} from './App'\nimport {Provider} from 'react-redux'\nimport {store} from './store/store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formSearch\":\"CitySearchForm_formSearch__2isJ9\",\"inputFormSearch\":\"CitySearchForm_inputFormSearch__YBbzO\"};"],"sourceRoot":""}