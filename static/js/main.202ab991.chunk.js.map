{"version":3,"sources":["reportWebVitals.ts","components/Card/Card.tsx","App.tsx","store/sitiesCardsReducer.ts","store/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","date","Date","toLocaleString","year","month","day","useStyles","makeStyles","createStyles","root","minWidth","background","media","height","paddingTop","width","tempNow","textAlign","CityCard","props","cityName","generalInfoTemp","wind","classes","React","useState","expanded","setExpanded","Card","className","CardHeader","action","Tooltip","title","IconButton","aria-label","onClick","DeleteRounded","subheader","CardContent","Typography","variant","component","temp","style","display","marginLeft","marginRight","src","alt","color","feels_like","temp_max","temp_min","speed","App","cities","useSelector","state","sitiesCards","Container","fixed","Grid","container","spacing","map","city","item","name","main","id","initialState","rootReducer","combineReducers","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.202ab991.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport {Tooltip} from '@material-ui/core'\r\nimport {DeleteRounded} from '@material-ui/icons'\r\n\r\nconst options = {\r\n    year: 'numeric',\r\n    month: 'numeric',\r\n    day: 'numeric',\r\n}\r\n\r\nconst date = new Date().toLocaleString('ru', options)\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        root: {\r\n            minWidth: 200,\r\n            background: 'rgba(91, 180, 255, 0.3)',\r\n        },\r\n        media: {\r\n            height: 0,\r\n            paddingTop: '56.25%', // 16:9\r\n            width: '30%'\r\n        },\r\n        tempNow: {\r\n            textAlign: 'center'\r\n        }\r\n    }),\r\n)\r\n\r\ntype CardPropsType = {\r\n    cityName: string\r\n    generalInfoTemp: {\r\n        'temp': number\r\n        'feels_like': number\r\n        'temp_min': number\r\n        'temp_max': number\r\n        'pressure': number\r\n        'humidity': number\r\n    },\r\n    wind: {\r\n        'speed': number\r\n        'deg': number\r\n    }\r\n}\r\n\r\nexport function CityCard(props: CardPropsType) {\r\n    let {cityName, generalInfoTemp, wind} = props\r\n\r\n    const classes = useStyles()\r\n    const [expanded, setExpanded] = React.useState(false)\r\n\r\n    const deleteCardClick = () => {\r\n        setExpanded(!expanded)\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                action={\r\n                    <Tooltip title=\"Delete\">\r\n                        <IconButton aria-label=\"delete\" onClick={deleteCardClick}>\r\n                            <DeleteRounded/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n                title={cityName}\r\n                subheader={date}\r\n            />\r\n            <CardContent>\r\n                <Typography variant='h5' component='h1' className={classes.tempNow}>\r\n                    {generalInfoTemp.temp} 邃ソr\n                </Typography>\r\n                <img style={{\r\n                    display: 'block',\r\n                    marginLeft: 'auto',\r\n                    marginRight: 'auto'\r\n                }} src='http://openweathermap.org/img/wn/10d@2x.png' alt='weatherImage'/>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    Feels like: {generalInfoTemp.feels_like} 邃ソr\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    High: {generalInfoTemp.temp_max} 邃ソr\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    Low: {generalInfoTemp.temp_min} 邃ソr\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                    Wind: {wind.speed} m/s\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}","import React from 'react'\nimport './App.css'\nimport {useSelector} from 'react-redux'\nimport {AppStateType} from './store/store'\nimport {SitiesCardsType} from './store/sitiesCardsReducer'\nimport {CityCard} from './components/Card/Card'\nimport Grid from '@material-ui/core/Grid'\nimport {Container} from '@material-ui/core'\n\nexport const App = () => {\n    const cities = useSelector<AppStateType, SitiesCardsType>(state => state.sitiesCards)\n\n    return (\n        <div className='App'>\n            <Container fixed>\n                <Grid container spacing={3}>\n                    {cities.map((city) => {\n                        return (\n                            <Grid item key={city.id}>\n                                <CityCard cityName={city.name} generalInfoTemp={city.main} wind={city.wind}/>\n                            </Grid>)\n                    })}\n                </Grid>\n            </Container>\n        </div>\n    )\n}","import {GetWeatherAPIType} from '../api/api'\r\n\r\nconst initialState: SitiesCardsType = [\r\n    {\r\n        'coord': {\r\n            'lon': 30.52,\r\n            'lat': 50.43\r\n        },\r\n        'weather': [\r\n            {\r\n                'id': 804,\r\n                'main': 'Clouds',\r\n                'description': 'overcast clouds',\r\n                'icon': '04d'\r\n            }\r\n        ],\r\n        'base': 'stations',\r\n        'main': {\r\n            'temp': 4,\r\n            'feels_like': 2,\r\n            'temp_min': -2,\r\n            'temp_max': 5,\r\n            'pressure': 1025,\r\n            'humidity': 96\r\n        },\r\n        'visibility': 7000,\r\n        'wind': {\r\n            'speed': 4,\r\n            'deg': 130\r\n        },\r\n        'clouds': {\r\n            'all': 90\r\n        },\r\n        'dt': 1607002084,\r\n        'sys': {\r\n            'type': 1,\r\n            'id': 8903,\r\n            'country': 'UA',\r\n            'sunrise': 1606973979,\r\n            'sunset': 1607003784\r\n        },\r\n        'timezone': 7200,\r\n        'id': 703448,\r\n        'name': 'Kyiv',\r\n        'cod': 200\r\n    },\r\n    {\r\n        'coord': {\r\n            'lon': 30.52,\r\n            'lat': 50.43\r\n        },\r\n        'weather': [\r\n            {\r\n                'id': 804,\r\n                'main': 'Clouds',\r\n                'description': 'overcast clouds',\r\n                'icon': '04d'\r\n            }\r\n        ],\r\n        'base': 'stations',\r\n        'main': {\r\n            'temp': 2,\r\n            'feels_like': 0,\r\n            'temp_min': -5,\r\n            'temp_max': 4,\r\n            'pressure': 1025,\r\n            'humidity': 96\r\n        },\r\n        'visibility': 7000,\r\n        'wind': {\r\n            'speed': 5,\r\n            'deg': 130\r\n        },\r\n        'clouds': {\r\n            'all': 90\r\n        },\r\n        'dt': 1607002084,\r\n        'sys': {\r\n            'type': 1,\r\n            'id': 8903,\r\n            'country': 'UA',\r\n            'sunrise': 1606973979,\r\n            'sunset': 1607003784\r\n        },\r\n        'timezone': 7200,\r\n        'id': 703448,\r\n        'name': 'Kharkiv',\r\n        'cod': 200\r\n    },\r\n    {\r\n        'coord': {\r\n            'lon': 30.52,\r\n            'lat': 50.43\r\n        },\r\n        'weather': [\r\n            {\r\n                'id': 804,\r\n                'main': 'Clouds',\r\n                'description': 'overcast clouds',\r\n                'icon': '04d'\r\n            }\r\n        ],\r\n        'base': 'stations',\r\n        'main': {\r\n            'temp': 5,\r\n            'feels_like': 3,\r\n            'temp_min': -1,\r\n            'temp_max': 5,\r\n            'pressure': 1025,\r\n            'humidity': 96\r\n        },\r\n        'visibility': 7000,\r\n        'wind': {\r\n            'speed': 2,\r\n            'deg': 130\r\n        },\r\n        'clouds': {\r\n            'all': 90\r\n        },\r\n        'dt': 1607002084,\r\n        'sys': {\r\n            'type': 1,\r\n            'id': 8903,\r\n            'country': 'UA',\r\n            'sunrise': 1606973979,\r\n            'sunset': 1607003784\r\n        },\r\n        'timezone': 7200,\r\n        'id': 703448,\r\n        'name': 'Lviv',\r\n        'cod': 200\r\n    },\r\n]\r\n\r\nexport type SitiesCardsType = Array<GetWeatherAPIType>\r\n\r\ntype ActionType = {}\r\n\r\nexport const sitiesCardsReducer = (state = initialState, action: ActionType): SitiesCardsType => {\r\n    return state\r\n}","import {combineReducers, createStore} from 'redux'\r\nimport {sitiesCardsReducer} from './sitiesCardsReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    sitiesCards: sitiesCardsReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport reportWebVitals from './reportWebVitals'\nimport {App} from './App'\nimport {Provider} from 'react-redux'\nimport {store} from './store/store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}